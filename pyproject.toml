[build-system]
requires = ["poetry_core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "yapapi"
version = "0.9.0"
description = "High-level Python API for the New Golem"
authors = ["Przemys≈Çaw K. Rekucki <przemyslaw.rekucki@golem.network>", "GolemFactory <contact@golem.network>"]
license = "LGPL-3.0-or-later"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Framework :: AsyncIO",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: System :: Distributed Computing"
]
repository = "https://github.com/golemfactory/yapapi"
documentation = "https://yapapi.readthedocs.io/en/stable/api.html"
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.6.2"
aiohttp = "^3.6"
aiohttp-sse-client = "^0.1.7"
dataclasses = { version = "^0.8", python = ">=3.6, <3.7"}
more-itertools = "^8.6.0"
urllib3 = "^1.25.9"
typing_extensions = "^3.10.0"

async_exit_stack = "^1.0.1"
jsonrpc-base = "^1.0.3"

ya-aioclient = "^0.6.3"
toml = "^0.10.1"
srvresolver = "^0.3.5"
colorama = "^0.4.4"
semantic-version = "^2.8"
attrs = ">=19.3"

# Adding `goth` to dependencies causes > 40 additional packages to be installed. Given
# that dependency resolution in `poetry` is rather slow, we'd like to avoid installing
# `goth` for example in a CI pipeline that only runs linters/unit tests, not integration
# tests. Therefore we specify `goth` as an "extra" dependency, with `optional = "true"`.
# It will be then installable with `poetry install -E integration-tests`.
# Note that putting `goth` in `poetry.dev-dependencies` instead of `poetry.dependencies`
# would not work: see https://github.com/python-poetry/poetry/issues/129.
goth = { version = "^0.10", optional = true, python = "^3.8.0" }
# goth = { git = "https://github.com/golemfactory/goth.git", branch = "master", optional = true, python = "^3.8.0", develop = true }
Deprecated = "^1.2.12"
python-statemachine = "^0.8.0"

# goth tests
pexpect = {version = "^4.8.0", optional = true}

# Docs
sphinx = { version = "^4.0.1", optional = true }
sphinx-autodoc-typehints = { version = "^1.12.0", optional = true }
sphinx-rtd-theme = { version = "^1.0.0", optional = true}

[tool.poetry.extras]
integration-tests = ['goth', 'pytest', 'pytest-asyncio', 'pexpect']
docs = ['sphinx', 'sphinx-autodoc-typehints', 'sphinx-rtd-theme']

[tool.poetry.dev-dependencies]
black = "^21.7b0"
pytest = "^6.2"
pytest-rerunfailures = "^10.1"
pytest-asyncio = "^0.14"
mypy = "^0.782"
liccheck = "^0.4.7"
poethepoet = "^0.8.0"
pytest-cov = "^2.11"
factory-boy = "^3.2.0"

[tool.black]
line-length = 100
target-version = ['py36']

[tool.blacken-docs]
line-length = 80

[tool.liccheck]
authorized_licenses = [
  "bsd",
  "new bsd",
  "bsd license",
  "apache 2",
  "apache",
  "Apache Software",
  "MPL-2.0",
  "MIT",
  "LGPL",
  "LGPL-3.0-or-later",
  "Python Software Foundation",
  "ISC",
]
unauthorized_licenses = [
  "gpl v3"
]

[tool.liccheck.authorized_packages]
ya-client-activity = "0.1.0"
ya-client-payment = "0.1.0"
ya-market = "0.1.0"

[tool.poe.tasks]
test = "pytest --cov=yapapi --ignore tests/goth_tests"
goth-assets = "python -m goth create-assets tests/goth_tests/assets"
goth-tests = "pytest -svx tests/goth_tests --ssh-verify-connection --reruns 3 --only-rerun AssertionError --only-rerun TimeoutError --only-rerun goth.runner.exceptions.TemporalAssertionError --only-rerun urllib.error.URLError --only-rerun goth.runner.exceptions.CommandError"
typecheck = "mypy ."
codestyle = "black --check --diff ."
_liccheck_export = "poetry export -f requirements.txt -o .requirements.txt"
_liccheck_verify = "liccheck -r .requirements.txt"
liccheck = ["_liccheck_export", "_liccheck_verify"]
check = ["test", "typecheck", "codestyle", "liccheck"]
clean = "rm -rf .coverage .requirements.txt dist md handbook build"
clean_blender = "rm -f examples/blender/*.png examples/blender/*.log"
clean_hello = "rm -f examples/hello-world/*.log"
clean_http_proxy = "rm -f examples/http-proxy/*.log"
clean_simple_service = "rm -f examples/simple-service-poc/*.png examples/simple-service-poc/*.log"
clean_ssh = "rm -f examples/ssh/*.log"
clean_webapp = "rm -f examples/webapp/*.log"
clean_yacat = "rm -f examples/yacat/*.log"
clean_examples = ["clean_blender", "clean_hello", "clean_http_proxy", "clean_simple_service", "clean_ssh", "clean_webapp", "clean_yacat"]
sphinx = "sphinx-build docs/sphinx/ build -E"
