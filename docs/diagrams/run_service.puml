@startuml
participant "Client code" #Gold
participant "engine:Golem" as engine #Turquoise
participant "cluster:Cluster" as cluster #Violet
collections ":cluster.spawn_instance" as spawn_instance <<coroutine>> #Violet
participant ":engine.start_worker" as start_worker <<coroutine>> #Turquoise
participant "ctx:WorkContext" as ctx #SkyBlue
participant "instance:ServiceClass" as instance #Gold
participant "instance_batches:cluster._run_instance" as instance_batches <<coroutine>> #Violet
participant ":engine.process_batches" as process_batches <<coroutine>> #Turquoise

create engine
"Client code" -> engine : <<create>>
"Client code" -> engine : run_service(srv_class)

activate engine
create cluster
engine -> cluster : <<create>>(srv_class)
engine -> cluster : spawn_instances()

activate cluster
create spawn_instance
cluster -> spawn_instance : <<create>>
cluster -> spawn_instance : loop.create_task()
deactivate cluster

activate spawn_instance
create start_worker
spawn_instance -> start_worker : <<create>>
spawn_instance -> start_worker : await

activate start_worker

create ctx
start_worker -> ctx : <<create>>
start_worker -> spawn_instance : loop.create_task()
deactivate start_worker

activate spawn_instance

create instance
spawn_instance -> instance : <<create>>(srv_class, ctx)

create instance_batches
spawn_instance -> instance_batches : <<create>>(instance)

create process_batches
spawn_instance -> process_batches : <<create>>(instance_batches)
spawn_instance -> process_batches : await

activate process_batches
process_batches -> instance_batches : anext()
activate instance_batches

instance_batches -> cluster : get_handler(instance)
activate cluster
cluster -> instance_batches : return instance.start
deactivate cluster

instance_batches -> instance : handler.anext()

activate instance
instance -> ctx : deploy()
activate ctx
deactivate ctx
instance -> ctx : start()
activate ctx
deactivate ctx

instance -> instance_batches : yield ctx.commit()
instance_batches -> process_batches : yield batch

process_batches -> instance_batches : asend(batch_results)

instance_batches -> instance : handler.asend(batch_results)

instance -> instance_batches : StopIteration
deactivate instance

instance_batches -> cluster : get_handler(instance)
activate cluster
cluster -> instance_batches : return instance.run
deactivate cluster

instance_batches -> instance : handler.anext()

activate instance
instance -> ctx : run()
activate ctx
deactivate ctx

instance -> instance_batches : yield ctx.commit()
instance_batches -> process_batches : yield batch

process_batches -> instance_batches : asend(batch_results)

instance_batches -> instance : handler.asend(batch_results)

instance -> ctx : run()
activate ctx
deactivate ctx

instance -> instance_batches : StopIteration
deactivate instance

instance_batches -> cluster : get_handler(instance)
activate cluster
cluster -> instance_batches : return None
deactivate cluster

instance_batches --> process_batches
deactivate instance_batches

process_batches --> spawn_instance
deactivate spawn_instance
deactivate spawn_instance

@enduml


' TODO:
' legenda do kolorków
' konwencja nazywania obiektów
' nazwy funkcji wewnętrznych
' linki do kodu
' komentarze nt pominiętych elementów/kroków
' skrypt do tworzenia svg i wstawianie linków
' instrukcja jak wygenerować svg
' parser xml: https://docs.python.org/3/library/xml.etree.elementtree.html
