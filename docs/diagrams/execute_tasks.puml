@startuml
participant "Client code" #Gold
participant "executor:Executor" as executor #Violet
participant "golem:[[../../yapapi/golem.py Golem]]" as engine #Turquoise
participant worker_task <<asyncio.Task>>
participant "batch_generator:worker" as batch_generator <<AsyncGenerator>> #Gold
participant "ctx:WorkContext" as ctx #SkyBlue
participant "act:Activity" as act #SkyBlue

' collections "worker_wrapper" as start_worker <<asyncio.Task>> #Violet
' participant ":golem.process_batches" as process_batches <<coroutine>> #Turquoise

create engine
"Client code" -> engine : <<create>>
"Client code" -> engine ++ #LightGray : execute_tasks(worker)
' ++ is a shorthand for activating the receiver

create executor
engine -> executor : <<create>>
engine -> executor ++ #LightGray: submit(worker)

executor -> engine ++ #LightGray: start_worker(worker)

create worker_task
engine -> worker_task --++ : <<create_task>>
note right
  simplified, task creation
  involves also agreement_pool
end note

create act
worker_task -> act : <<create>>
create ctx
worker_task -> ctx : <<create>>(act)

'engine -> executor --++ : worker_wrapper(act, ctx)
worker_task -> executor ++ : worker_wrapper(act, ctx)
' deactivate engine
note left: callback

create batch_generator
executor -> batch_generator : <<create>>(ctx)

executor -> engine ++ : process_batches

' batch 1
engine -> batch_generator : anext()
activate batch_generator
batch_generator -> ctx : send_file()
activate ctx
deactivate ctx
batch_generator -> ctx : run()
activate ctx
deactivate ctx
batch_generator -> ctx : commit()
activate ctx
return batch_1
return yield batch_1

engine -> act : send(batch_1)
activate act
return batch_results_1

' batch 2
engine -> batch_generator : asend(batch_results_1)

activate batch_generator
batch_generator -> ctx : run()
activate ctx
deactivate ctx
batch_generator -> ctx : download_file()
activate ctx
deactivate ctx
batch_generator -> ctx: commit()
activate ctx
return batch_2
return yield batch_2

engine -> act : send(batch_2)
activate act
return batch_results_2

' ... more batches processed ...

' last batch processed
engine -> batch_generator : asend(batch_results_2)
activate batch_generator
return StopIteration

return

deactivate executor
engine <-- executor : task generator
deactivate executor

"Client code" <-- engine: task generator
deactivate engine

@enduml
