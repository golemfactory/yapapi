@startuml
participant "Client code" #Gold
participant "golem:[[../../yapapi/golem.py Golem]]" as engine #Turquoise
participant ":Executor" as executor #Violet
collections ":golem.start_worker" as start_worker <<asyncio.Task>> #Turquoise
participant "ctx:WorkContext" as ctx #SkyBlue
participant "batch_generator:worker" as batch_generator <<AsyncGenerator>> #Gold
participant ":golem.process_batches" as process_batches <<coroutine>> #Turquoise
participant "act:Activity" as act #SkyBlue

create engine
"Client code" -> engine : <<create>>
"Client code" -> engine ++ : execute_tasks(worker)  ' ++ is a shorthand for activating the receiver

create executor
engine -> executor : <<create>>
engine -> executor ++ : submit(worker)

create start_worker
executor -> start_worker : <<create>>
executor -> start_worker ++ : <<run-in-loop>>

' activate start_worker
create act
start_worker -> act : <<create>>
create ctx
start_worker -> ctx : <<create>>(act)

start_worker -> executor : executor.submit().worker_wrapper()
deactivate start_worker

activate executor

create batch_generator
executor -> batch_generator : <<create>>(ctx)

create process_batches
executor -> process_batches : <<create>>(batch_generator)
executor -> process_batches : await

activate process_batches

' batch 1
process_batches -> batch_generator : anext()
activate batch_generator
batch_generator -> ctx : send_file()
activate ctx
deactivate ctx
batch_generator -> ctx : run()
activate ctx
deactivate ctx
batch_generator -> ctx : commit()
activate ctx
return batch_1
return yield batch_1

process_batches -> act : send(batch_1)
activate act
return batch_results_1

' batch 2
process_batches -> batch_generator : asend(batch_results_1)

activate batch_generator
batch_generator -> ctx : run()
activate ctx
deactivate ctx
batch_generator -> ctx : download_file()
activate ctx
deactivate ctx
batch_generator -> ctx: commit()
activate ctx
return batch_2
return yield batch_2

process_batches -> act : send(batch_2)
activate act
return batch_results_2

' ... more batches processed ...

' last batch processed
process_batches -> batch_generator : asend(batch_results_2)
activate batch_generator
return StopIteration

executor <-- process_batches
deactivate process_batches

deactivate executor
engine <-- executor : task generator
deactivate executor

"Client code" <-- engine: task generator
deactivate engine

@enduml
